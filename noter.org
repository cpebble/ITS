* ITS
Zoom: https://ucph-ku.zoom.us/j/61251663095?pwd=YURWTG0xQmtDS21TL0hwOVFUVFI2UT09
* 31/08 Intro
** Bog
Computer security: Principles and Practice.
Stalling & Lawrie Brown, 4th and Global Ed.

** Afleveringer
6 Ugentlige
Bestået/ikke bestået
Mindst 66% korrekt for eksamenskvalificeringer
Kun EN Genaflevering(1-4)

** Labs
TAs:
- Niels Christian Buch
- Ole-Christian Galbo Engstrøm
- Lasse Grønborg

** Eksamen
Nov 2020
4-hour skriftlig
Hjælpemidler uden internettet

** Læremål
- Introduktion til fæltet it-sikkerhed
- How to think about breaking systems
- Defending from hackers
- Hands-on experience during exercises

** Hvad er IT-sikkerhed
- Firewalls
- Crypto
- Software flaws
- Code review
- Reverse Engineering
- Security management
- Passwords
- Patching
- Trusselsmodeller
- Intrusion Detection
- Incident handling

Usability er modstykket til sikkerhed

** Hovedespørgsmål
Hvad er vigtigt for mig?
Hvad er min trusselsmodel

** Sikkerhedsmål
STRIDE Mål:

| Threat                                         | Desired property  |
|------------------------------------------------+-------------------|
| Spoofing                                       | Authenticity      |
| Tampering                                      | Integrity         |
| Repudiation(man kan ikke løbe fra en kontrakt) | Non-repudiability |
| Information disclosure                         | Confidentiality   |
| Dos                                            | Abailability      |
| Elevation of priviledge                        | Authorization     |

** Hacking timeline
Center for cybersikkerhed siger "Cybertruslen mod Dk er meget høj"
*** Notable hacks:
*** 2010 - Stuxnet
Et angreb på iranske netværk. Sigtede fysisk ødelæggelse
*** 2010 - Operation Aurora
Angreb på google fra "kinesiske hackere"
*** 2011 - Anonymous og Lolsec
Hacktivister. Anonymous blev kaldt "person of the year" af time
*** 2012 - Saudi aromco
Flere tusinde filer i et saudi arabisk oliefirme blev overskrevet
af billeder af amerikanske flag. Et hacktivistgruppe tog ansvar,
men det menes at være iran
*** 2013 APT
En kontroversiel rapport om Advanced persistent threats
Stats-sponsorerede hackere. Den første officielle rapport om statshacking
med fokus på kina
*** 2014 Sony
Igen påstået at være hacktivister "Guardians of peace"
Turns out, det var nordkoreanske hackere. The Interview filmen
*** 2014 Snowden leaks
No further info neccesary :'( 
*** 2015 Rapport fra FET
Den årlige sikkerhedsrapport. For første gang siger FET At risikoen for
cyberangreb er meget høj
FET er den offentlige myndighed imod 
*** 2015 Angreb på ukrainske elkraftværker
Cyberangreb der sørgede for at flere ukrainske husstande mistede strøm.
Russisk angreb
Første gang kritisk infrastruktur blev ramt
*** 2016 Angreb på hillarys kampagne
Russiske statsstøttede hackere lækkede konfidentielle mails fra hillarys
kampagne.
Viser at man ikke kun hacker for at spionere, men også for at komme ud
for folk
*** 2017 NSA værktøjer hacket
Shadowbrokers lækker NSAs zero-days
Inklusiv Eternalblue
*** 2017 som leder til de to angreb
NotPetya - Mærsk Ransomware
Wannacry - Ransomware

** Så hvem hacker?
Low-skilled, low-fokus: De nemme. Skiddies
High-skille, low-fokus: Mere seriøse hacks.
High-skilled, high-fokus: De skræmmende. Fremmede efterretningstjenester
Low-skilled, high-fokus: Flere skiddies med en konto på hackforums
- Cyberkrig
- Cyberterror
- Hacktivister
- Espionace
- APT
- Cybercrime

*** Cyberkrig
**** Estonia 2007
En statue skulle flyttes. Mange sider blev under dette forløb DDoS'ed. Er det nationsstat
mod nationstat? Ingen direkte smoking gun, men der er forbindelser til kremlt
**** Palestina 2019. Lidt mere seriøs
Israels militær udgiver to billeder af en bygning. "Disse to bygninger blev bombet fordi
der sad folk igang med at hacke os"
Blanding af konventionel krig og cyberkrig. Meget afskrækkende

**** Et femte domæne
USA Siger det er et nyt domæne
"Land, Sea, Air, Space, /Cyber/"
Altså. Du risikerer at få konventionelle våben brugt mod dig hvis du bruger cyber mod dem

*** Hacktivisme
Anonymous for eksempel

Hacker for at kæmpe tilbage mod systemet. Det er uklart hvad der pirrer
dem, så alt kan få dem efter dig
Primært 2011
**** False flags
Guccifer 2.0 - Hillary
Guardians of peace - Nordkorea vs Sony
Cutting sword of justice - Angrebet på Saudi Aramco 2012

*** Cyberspionage
Meget mindre risikofyldt end klassisk spionage. 

FE Hacker. Se cyber-akademiet.
NSA Hacker

*** APT
Når man finder cybergrupper man går ud fra er stater giver man dem navne
APT10/Stone Panda/Potassium/Red Apollo

APT10 er på fbi most wanted

** Hvordan hacker vi?
70% ahcks er externe aktorer
30% er interne aktører indblandet
55% er fra organiserede grupper

Phishing er mest populært
Scan-and-Exploit er næsten lige så højt
Unauthed use of credentials. Den sidste store, lækkede pw-lists

*** Unauthed use of creds
Hvis du kun bruger mail/password, og mister dit pw så kan alle logge ind
- Case story
CEO af et dansk firma med 100 employees.
To falske mails blev sendt til regnskab. 600k og 40k blev anmodet
Attackere loggede på fra Nigeria
De lavede automatiske regler til at slette svar fra regnskab. CEO så intet svar

- Hvad er løsningen?
2fa
Something you know, something you have

*** Scan and exploit
Brug shodan til at finde sårbare servere. ExploitDB kan finde databaserne

*** Cyber kill chain
Lockheed martin
Recon -> Weaponization -> Delivery -> Exploit -> Installation -> Command and Control -> Exfiltration

*** Mitre ATT&Ck
Har 12 faser. Er mere udpenslet
[[https://attack.mitre.org/][Link til MITRE]]

** Så hvad kan vi gøre
- Studere angreb
- Finde huller og Lappe dem
- Investere i /Cyber/
* 01/09 Lab 1(kryptografi recap)
** Symmetrisk kryptering
- Uneversel teknik itl at sørge for /confidentiality/ for overførsel af data
- Også kaldet "konventionel kryptering" eller "single-key" kryptering
- Der er generelt to krav:
  - En stærk krypteringsalgoritme
  - Sender og modtager må have modtaget kopier af secret key OOB
- Det sidste punkt er også det største problem. Både afsender og modtager skal have modtaget 
  Secret keyen

Plaintext input -X> krypteringsalgoritme med nøgle k) -Ciphertext)> Dekrypteringsalgoritme med kopi af k -> Plaintext output

Forskellige angreb:
- Cryptanalytiske angreb:
  - kræver:
    - Angreb på algoritmens natur
    - kendskab til karakteristika af plaintext
    - Evt. plaintext-ciphertext par
  - Exploiterer algoritmen svagheder til at finde en specifik plaintext
    eller brugt nøgle
    - Hvis successfuldt knækker det alle forrige og fremtidige beskeder krypteret med den nøgle
- Brute force
  - Prøv alle mulige nøgler på et ciffertekst indtil en læsbar plaintext nås

    Tre populære symmetriske krypteringsalgoritmer
| x               | DES | Triple DES |         AES |
|-----------------+-----+------------+-------------|
| Plaintext block |  64 |         64 |         128 |
| Ciffertext      |  64 |         64 |         129 |
| keysize         |  56 |    112/168 | 128,192,256 |
AES Er den forretrukne

*** AES
AES Tager $10^60$ år at bryde med keysize 256

NIST Bad om forslag til en ny krypteringsalgoritme i 1997. Derfra AES

- Praktiske problemer:
  - Typisk bruges de på en enhed af data større end en 64 eller 128 bit block(obvsly)
    Det giver information omkring den tekst der lagres
  - Electronic codebook er den simpleste måde at kryptere multiple blocks
    - Analyster kan udnytte regularities i cifferteksten

ECB Deler teksten op i blocke og krypterer dem alle med samme nøgle

Stream-cipher er meget bedre, den tager en strøm af blocke og krypterer den.
Dette giver også mening på internettet hvor man har en strøm af data
Vi genererer en ny nøgle hver gang vi krypterer en block. Dette gør vi ved brug
af en "pseudo-random-key-generator". Nøglen er essentielt et matematisk "seed" til
denne algoritme

En fordel er at sende en symmetrisk nøgle seed via assymetrisk kryptering

** Message Authentification
- Beskytter mod aktive angreb ved at 
- bekræfte at den besked der sendes er korrekt,
  - ikke ændret(integritet)
  - fra en autentisk kilde(auth)
  - Timely og i korrekt sekvens(mitm)
- kan bruge konventionel kryptering
  
*** Message auth uden fortrolighed
- Beskedkryptering giver ikke i sig selv en sikker form for authentikering

Vi kan bruge MAC - Message authentication code
Brug plaintext igennem MAC algoritmen og krypter denne med din crypto.
append resultatet til beskeden.
Send den appendede besked til modtager
Modtager tager så beskeden, kører den igennem MAC algoritmen og sammenligner
med den appendede og dekrypterede MAC. En simple MAC er en hashfunktion
/MAC: Dette er basically en spicy checksum/

For at en hashfunktion kan bruges skal føllgende egenskaber gælde:
- kan bruges på en blok af arbitrær størrelse
- Producerer en fixed-length output
- H(x) er relativt billig at udregne for et givent x(Især timing attacks her)
- Envejs eller pre-image modstandsdygtigt
- Det er svært at finde en y != x således at H(y) = H(x)
- kollisionsmodstandsdygtigt

Der er to approaches til at angribe en sikker hashfunktion(de sanmme som med symmetri)
SHA er den mest vidt brugte hash-algoritme

** Public-key kryptering
Offentliggt proposed af Diffie og Hellman i 1976
Baseret på matematiske funktioner
Assymetrisk
- To seperate nøgler,
- Publickey og privatekey
- Public key er offentlig og skal deles

Vi har igen en krypteringsalgoritme
- Plaintext
- Algoritmen
- Public og Private key(En til kryptering, en til dekryptering)
- Cifferteksten

En bruger krypterer data med sin egen private key.
Alle med den tilsvarende offentlige nøgle kan dekryptere den
Dette kan bruges til Message Authentification

*** krav til Public-key systemer
- Billigt at skabe nøglepar
- Billigt for sender at kryptere beskeder
- Andet stuff



* 07/09 Risk Assessments/OS-Sec/Software-Sec/Webapp-Sec
I it-sikkerhed arbejder vi med /intelligent adversaries/. Altså
modstandere der rent faktisk prøver at breake ting.

Threat model: Er du en del af flokken vs et mål.
- En gut på rådhuspladsen vs en celebrity
- En lille rengøringstjeneste vs maersk eller udenrigsministeriet

Man har en "Risiko appetit"
- Grund-risiko
- Uheld
- Målrettede angreb
- Stater(APT)  
Hvor lægger du din sikkerhedsbar?

** Risk Assessment
En trekant af
- Vulnerabilities
- Værdi/konsekvens
- Trusler

Hvis værdi/konsekvens er lav er det ok med en lav severity  
Hvis der er mange sårbarheder, men ingen trusler(en air-gapped server
eg), så er det også low-severity  

*** De fem risk assessment spørgsmål
1. What do you want to protect
   Assets
2. Who do you want to protect it from
   Adve. and threats
3. How likely is it that you will need to protecct it
   Probability
4. How bad are the consequences if you fail?
   Risk
5. How much trouble are you willing to go through?
   Value

Lav threat modeling tidligt. Målet er at finde fejl i sikkerheds /design/

- Trusler vs Risiko
Det er rigtigt vigtigt at skelne mellem "Hvad kan gå galt" og "Hvad er sandsynligt der går galt"

** OSS
*Attack surface*:
Nederst til øverst:
- Fysisk Hardware
  Hvis du har fysisk adgang er der mange mulige angreb(rubber ducky e.g.)
- OS Kernel(Bios/SMM her)
  Skalerer ikke særligt godt, da OS kræver mange resourcer at breake
- User Applications and Utilities
  Nemmest, laveste effort

Det gælder om at have så mange lag som muligt for at være helt sikker.
Undgå så vidt muligt /single point of failure/

Igen er det en god ide at starte med en risk assessment
- Sikrer derefter OS og hovede-applicationer(ikke kør IE f.eks.)
  Sæt processer op til opdatering, patching, etc.
- Sikrer kritisk content 
- Sikrer netværksbeskyttelse
- Sikrer at de opstilte processer bliver brugt

Leverandører og sikkerhedsorganiseringer har /security hardening guides/ som
basically er checklists

*** Base OS Hardening
Patch og install OS  
Harden OS ved
- Fjern unødvendige services/apps
- Konfigurer brugere/grupper/permissions
- Installer ekstra sikkerhedscontrols
  Antivirus, host-based Firewalls, Intrusion detection systems
- Test sikkerheden af base OS

** Web App Sec
Du kan sagtens have usikker software over en sikker kommunikationskanal  
Typiske risiko:
- Defacing
- Exposing info
- Money/cc issues
- Botnets
- DoS
- Crypto miners

En webserver kan nemt bruges som springbræt til det interne netværk(e.g. den går igennem firewall)

/Noter at målet her er at angrebe server og ikke brugere/

*SANITIZE* Brugerdata!!  
Gå ud fra at alt brugerinput er hostile  
Brug stored procedures til at abstrahere data access  
Minimer database privilegier  
/Whitelist/ Input validation
* 11/09 User Auth
** ACL - access control list
"Alice: read, write; Bob: read"

- RBAC 
Role based access control. Brugere har grupper, grupper har perms

Når man kigger på disse emner bruger vi /Subjekter, Objekter og Access right/
- Subject skal kunne tilgå objekter
- Objecter er resourcer som adgang skal controlleres
- Access right beskriver hvordan et subjekt må påvirke et objekt
  - Read
  - Write
  - Exec
  - Create/Delete
  - Search

Policies:
- Dac: Discretionary Access control
  Controls access based on the id of the requestor and on access rules
  stating what requestors are allowed to do
- MAC: Mandatory Access control
  Controls access based on sec labels and clearances. Du må ofte gerne
  dele op, men ikke dele ned. kræver rigtigt meget administration
- RBAC: Role-based.
- ABAC: Controls based on attributes of the user e.g. alder, id, ip

** IAM

En /administrativ process/ blandet med en teknologisk løsning, som validerer
identiteten af individer, og tillader ejere af data, applications, og systemer
som enten centralt eller distribueret ansvar for at tilgive access til deres
respektive resourcer, til alle der deltager inde i IAM Frameworket

- Life cycle management

- Identitet, Authe, og Autho
- Principle of least access
- Grupper og roller
- Maintenance
- Segregation of duties. Udvikler har ikke devops ansvar e.g.

*** kernekoncepter
- Identitet(Public assertion)
- Authentication(Secret response)
- Authorization(Token, Ticket or Access control)
  
*** Case
Du arbejder på et internt projekt til udvikling af nyt økonomisystem til din virksomhed

Projektlederne fortæller at for at overholde tidsplanen skal der ikke bruges bruger-id'er.
Systemet skal i stedet have et stærkt hardcodet password.  
Alle der skal have adgang vil få oplyst koden hvis de har brug for adgangen.  
Det er slemt fordi: 
- Ingen bruger-id = ingen logging/reportin
- Brugere husker ikke 17 tegn, men skriver det ned
- Ingen funktionsadskillelse
- Du kan ikke fjerne folk igen når de forlader virksomheden

** Tre faktorer til auth
Noget man /ved/, Noget man /har/, og noget man /er/

** Angreb imod passwords
1. Hvad er dit password?
2. Gætte passwords
3. Dict attacks
4. Brute force
5. Rainbow tables

** Hashing og at gøre det sikkert
Hvis du har offline hash - Du ripped :'(

Hvis du har online hash, implementer en langsom alg, og/eller hav en penalty period

** Hvad er et godt password
Mange regler, primære er at øge keyspace(æøå()+=]*%) og længde
Længde > komplexitet

** Single sign on
Silo - Federation(Siloer stoler på hinanden)

Identity provider - Udsteder akkreditiver  
Service provider - Ticket fra IP  
Identity - bruger

Tokens
*** SAML - mest udbredt
Security Assertion Markup Language. En XML Baseret åben standard
* 14/09 Malware
Gæsteforelæser jens Christian Høy Monrad  
> Head of Mandiant Threat Intelligence, EMEA

** Trusselslandskabet: Motivation
Folk ser ikke:
- Organizationer splittet i industrier
- Low-level employee
- Personlig air-gapped netværk
- kun hvad de leder efter
- En sikker organization
De ser
- Unpatched vulns
- Nogen med adgang
- En vej ind i et måls netværk
- En "Close access opportunity"
- Overraskelser i din configfil
- En vej til at opnå deres strategiske mål
  
Faktorer der påvirker landskabet:  
- Cyber spionage
- Cyberkriminalitet
- Hacktivism
* 21/09 Cloud security
Software as a service <--> Platform aaS <--> Infrastructure aaS
Mindre indflydelse <-------------------------> Mere indflydelse

| Løsning | Eget ansvar                            | Cloud-leverandør                          |
| Saas    | Conf af log                            | Data / Apps                               |
| paas    | Logs fra egne                          | System management                         |
| IaaS    | Lokal overvågning / App-logs / OS-logs | Net, hardware, procedurer, fysisk sikring |

Vigtige ting til cloud leverandørers kontrakter:  
- Data i EU
- Brug af krypterin
- Leverandør mulighed for at tilgå data
- Logging
- Sletning af data
- kassering af datamedier
- Revisorerklæring
- Hovedsaligt valg af certificerede leverandører (ISO 27001)
- Registreredes rettigheder
Datatilsynet ^^
